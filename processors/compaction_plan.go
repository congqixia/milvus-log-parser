package processors

import (
	proto "github.com/golang/protobuf/proto"
)

type CompactionSegmentBinlogs struct {
	SegmentID            int64           `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	FieldBinlogs         []*FieldBinlog  `protobuf:"bytes,2,rep,name=fieldBinlogs,proto3" json:"fieldBinlogs,omitempty"`
	Field2StatslogPaths  []*FieldBinlog  `protobuf:"bytes,3,rep,name=field2StatslogPaths,proto3" json:"field2StatslogPaths,omitempty"`
	Deltalogs            []*DeltaLogInfo `protobuf:"bytes,4,rep,name=deltalogs,proto3" json:"deltalogs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CompactionSegmentBinlogs) Reset()         { *m = CompactionSegmentBinlogs{} }
func (m *CompactionSegmentBinlogs) String() string { return proto.CompactTextString(m) }
func (*CompactionSegmentBinlogs) ProtoMessage()    {}
func (*CompactionSegmentBinlogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cd95f524594f49, []int{39}
}

func (m *CompactionSegmentBinlogs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompactionSegmentBinlogs.Unmarshal(m, b)
}
func (m *CompactionSegmentBinlogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompactionSegmentBinlogs.Marshal(b, m, deterministic)
}
func (m *CompactionSegmentBinlogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactionSegmentBinlogs.Merge(m, src)
}
func (m *CompactionSegmentBinlogs) XXX_Size() int {
	return xxx_messageInfo_CompactionSegmentBinlogs.Size(m)
}
func (m *CompactionSegmentBinlogs) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactionSegmentBinlogs.DiscardUnknown(m)
}

var xxx_messageInfo_CompactionSegmentBinlogs proto.InternalMessageInfo

func (m *CompactionSegmentBinlogs) GetSegmentID() int64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

func (m *CompactionSegmentBinlogs) GetFieldBinlogs() []*FieldBinlog {
	if m != nil {
		return m.FieldBinlogs
	}
	return nil
}

func (m *CompactionSegmentBinlogs) GetField2StatslogPaths() []*FieldBinlog {
	if m != nil {
		return m.Field2StatslogPaths
	}
	return nil
}

func (m *CompactionSegmentBinlogs) GetDeltalogs() []*DeltaLogInfo {
	if m != nil {
		return m.Deltalogs
	}
	return nil
}

type CompactionType int32

const (
	CompactionType_UndefinedCompaction CompactionType = 0
	CompactionType_InnerCompaction     CompactionType = 1
	CompactionType_MergeCompaction     CompactionType = 2
)

var CompactionType_name = map[int32]string{
	0: "UndefinedCompaction",
	1: "InnerCompaction",
	2: "MergeCompaction",
}

var CompactionType_value = map[string]int32{
	"UndefinedCompaction": 0,
	"InnerCompaction":     1,
	"MergeCompaction":     2,
}

func (x CompactionType) String() string {
	return proto.EnumName(CompactionType_name, int32(x))
}

func (CompactionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_82cd95f524594f49, []int{1}
}

type CompactionPlan struct {
	PlanID               int64                       `protobuf:"varint,1,opt,name=planID,proto3" json:"planID,omitempty"`
	SegmentBinlogs       []*CompactionSegmentBinlogs `protobuf:"bytes,2,rep,name=segmentBinlogs,proto3" json:"segmentBinlogs,omitempty"`
	StartTime            uint64                      `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	TimeoutInSeconds     int32                       `protobuf:"varint,4,opt,name=timeout_in_seconds,json=timeoutInSeconds,proto3" json:"timeout_in_seconds,omitempty"`
	Type                 CompactionType              `protobuf:"varint,5,opt,name=type,proto3,enum=milvus.proto.data.CompactionType" json:"type,omitempty"`
	Timetravel           uint64                      `protobuf:"varint,6,opt,name=timetravel,proto3" json:"timetravel,omitempty"`
	Channel              string                      `protobuf:"bytes,7,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CompactionPlan) Reset()         { *m = CompactionPlan{} }
func (m *CompactionPlan) String() string { return proto.CompactTextString(m) }
func (*CompactionPlan) ProtoMessage()    {}
func (*CompactionPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cd95f524594f49, []int{40}
}

func (m *CompactionPlan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompactionPlan.Unmarshal(m, b)
}
func (m *CompactionPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompactionPlan.Marshal(b, m, deterministic)
}
func (m *CompactionPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactionPlan.Merge(m, src)
}
func (m *CompactionPlan) XXX_Size() int {
	return xxx_messageInfo_CompactionPlan.Size(m)
}
func (m *CompactionPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactionPlan.DiscardUnknown(m)
}

var xxx_messageInfo_CompactionPlan proto.InternalMessageInfo

func (m *CompactionPlan) GetPlanID() int64 {
	if m != nil {
		return m.PlanID
	}
	return 0
}

func (m *CompactionPlan) GetSegmentBinlogs() []*CompactionSegmentBinlogs {
	if m != nil {
		return m.SegmentBinlogs
	}
	return nil
}

func (m *CompactionPlan) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *CompactionPlan) GetTimeoutInSeconds() int32 {
	if m != nil {
		return m.TimeoutInSeconds
	}
	return 0
}

func (m *CompactionPlan) GetType() CompactionType {
	if m != nil {
		return m.Type
	}
	return CompactionType_UndefinedCompaction
}

func (m *CompactionPlan) GetTimetravel() uint64 {
	if m != nil {
		return m.Timetravel
	}
	return 0
}

func (m *CompactionPlan) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type CompactionResult struct {
	PlanID               int64           `protobuf:"varint,1,opt,name=planID,proto3" json:"planID,omitempty"`
	SegmentID            int64           `protobuf:"varint,2,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	NumOfRows            int64           `protobuf:"varint,3,opt,name=num_of_rows,json=numOfRows,proto3" json:"num_of_rows,omitempty"`
	InsertLogs           []*FieldBinlog  `protobuf:"bytes,4,rep,name=insert_logs,json=insertLogs,proto3" json:"insert_logs,omitempty"`
	Field2StatslogPaths  []*FieldBinlog  `protobuf:"bytes,5,rep,name=field2StatslogPaths,proto3" json:"field2StatslogPaths,omitempty"`
	Deltalogs            []*DeltaLogInfo `protobuf:"bytes,6,rep,name=deltalogs,proto3" json:"deltalogs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CompactionResult) Reset()         { *m = CompactionResult{} }
func (m *CompactionResult) String() string { return proto.CompactTextString(m) }
func (*CompactionResult) ProtoMessage()    {}
func (*CompactionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cd95f524594f49, []int{41}
}

func (m *CompactionResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompactionResult.Unmarshal(m, b)
}
func (m *CompactionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompactionResult.Marshal(b, m, deterministic)
}
func (m *CompactionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactionResult.Merge(m, src)
}
func (m *CompactionResult) XXX_Size() int {
	return xxx_messageInfo_CompactionResult.Size(m)
}
func (m *CompactionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactionResult.DiscardUnknown(m)
}

var xxx_messageInfo_CompactionResult proto.InternalMessageInfo

func (m *CompactionResult) GetPlanID() int64 {
	if m != nil {
		return m.PlanID
	}
	return 0
}

func (m *CompactionResult) GetSegmentID() int64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

func (m *CompactionResult) GetNumOfRows() int64 {
	if m != nil {
		return m.NumOfRows
	}
	return 0
}

func (m *CompactionResult) GetInsertLogs() []*FieldBinlog {
	if m != nil {
		return m.InsertLogs
	}
	return nil
}

func (m *CompactionResult) GetField2StatslogPaths() []*FieldBinlog {
	if m != nil {
		return m.Field2StatslogPaths
	}
	return nil
}

func (m *CompactionResult) GetDeltalogs() []*DeltaLogInfo {
	if m != nil {
		return m.Deltalogs
	}
	return nil
}

var fileDescriptor_82cd95f524594f49 = []byte{
	// 2602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0xdd, 0x6f, 0x1b, 0xc7,
	0x11, 0xf7, 0xf1, 0x43, 0x22, 0x87, 0x14, 0x45, 0xad, 0x1d, 0x99, 0xa5, 0x6d, 0x59, 0xbe, 0x24,
	0xb6, 0xe2, 0x38, 0x92, 0x2d, 0x37, 0x68, 0x50, 0x27, 0x0d, 0x2c, 0xcb, 0x56, 0x85, 0x4a, 0xae,
	0x7a, 0x54, 0xe2, 0xa2, 0x01, 0x4a, 0x9c, 0x78, 0x2b, 0xea, 0x6a, 0xde, 0x1d, 0x7d, 0xbb, 0x94,
	0xad, 0xbc, 0xc4, 0x48, 0x81, 0x02, 0x2d, 0xda, 0xa6, 0x45, 0x5f, 0x0b, 0xb4, 0xe8, 0x53, 0x81,
	0xbe, 0xb4, 0x05, 0xfa, 0xd2, 0xfe, 0x03, 0x45, 0xfb, 0xde, 0x7f, 0xa3, 0xff, 0x42, 0xb0, 0x1f,
	0xb7, 0xf7, 0xc1, 0x23, 0x79, 0x92, 0xfc, 0xf1, 0xc6, 0xdd, 0x9b, 0x9d, 0x99, 0x9d, 0x9d, 0xf9,
	0xcd, 0xcc, 0x2e, 0xa1, 0x6e, 0x99, 0xd4, 0x6c, 0x77, 0x3c, 0xcf, 0xb7, 0x96, 0xfb, 0xbe, 0x47,
	0x3d, 0x34, 0xe7, 0xd8, 0xbd, 0xc3, 0x01, 0x11, 0xa3, 0x65, 0xf6, 0xb9, 0x59, 0xed, 0x78, 0x8e,
	0xe3, 0xb9, 0x62, 0xaa, 0x59, 0xb3, 0x5d, 0x8a, 0x7d, 0xd7, 0xec, 0xc9, 0x71, 0x35, 0xba, 0xa0,
	0x59, 0x25, 0x9d, 0x03, 0xec, 0x98, 0x62, 0xa4, 0x3f, 0x83, 0xea, 0x83, 0xde, 0x80, 0x1c, 0x18,
	0xf8, 0xc9, 0x00, 0x13, 0x8a, 0x6e, 0x42, 0x61, 0xcf, 0x24, 0xb8, 0xa1, 0x2d, 0x6a, 0x4b, 0x95,
	0xd5, 0x8b, 0xcb, 0x31, 0x59, 0x52, 0xca, 0x36, 0xe9, 0xae, 0x99, 0x04, 0x1b, 0x9c, 0x12, 0x21,
	0x28, 0x58, 0x7b, 0x9b, 0xeb, 0x8d, 0xdc, 0xa2, 0xb6, 0x94, 0x37, 0xf8, 0x6f, 0xa4, 0x43, 0xb5,
	0xe3, 0xf5, 0x7a, 0xb8, 0x43, 0x6d, 0xcf, 0xdd, 0x5c, 0x6f, 0x14, 0xf8, 0xb7, 0xd8, 0x9c, 0xfe,
	0x7b, 0x0d, 0x66, 0xa4, 0x68, 0xd2, 0xf7, 0x5c, 0x82, 0xd1, 0x6d, 0x98, 0x22, 0xd4, 0xa4, 0x03,
	0x22, 0xa5, 0x5f, 0x48, 0x95, 0xde, 0xe2, 0x24, 0x86, 0x24, 0xcd, 0x24, 0x3e, 0x3f, 0x2c, 0x1e,
	0x2d, 0x00, 0x10, 0xdc, 0x75, 0xb0, 0x4b, 0x37, 0xd7, 0x49, 0xa3, 0xb0, 0x98, 0x5f, 0xca, 0x1b,
	0x91, 0x19, 0xfd, 0xb7, 0x1a, 0xd4, 0x5b, 0xc1, 0x30, 0xb0, 0xce, 0x39, 0x28, 0x76, 0xbc, 0x81,
	0x4b, 0xb9, 0x82, 0x33, 0x86, 0x18, 0xa0, 0x2b, 0x50, 0xed, 0x1c, 0x98, 0xae, 0x8b, 0x7b, 0x6d,
	0xd7, 0x74, 0x30, 0x57, 0xa5, 0x6c, 0x54, 0xe4, 0xdc, 0x43, 0xd3, 0xc1, 0x99, 0x34, 0x5a, 0x84,
	0x4a, 0xdf, 0xf4, 0xa9, 0x1d, 0xb3, 0x59, 0x74, 0x4a, 0xff, 0xa3, 0x06, 0xf3, 0x77, 0x09, 0xb1,
	0xbb, 0xee, 0x90, 0x66, 0xf3, 0x30, 0xe5, 0x7a, 0x16, 0xde, 0x5c, 0xe7, 0xaa, 0xe5, 0x0d, 0x39,
	0x42, 0x17, 0xa0, 0xdc, 0xc7, 0xd8, 0x6f, 0xfb, 0x5e, 0x2f, 0x50, 0xac, 0xc4, 0x26, 0x0c, 0xaf,
	0x87, 0xd1, 0x0f, 0x60, 0x8e, 0x24, 0x18, 0x91, 0x46, 0x7e, 0x31, 0xbf, 0x54, 0x59, 0x7d, 0x73,
	0x79, 0xc8, 0xcb, 0x96, 0x93, 0x42, 0x8d, 0xe1, 0xd5, 0xfa, 0xf3, 0x1c, 0x9c, 0x55, 0x74, 0x42,
	0x57, 0xf6, 0x9b, 0x59, 0x8e, 0xe0, 0xae, 0x52, 0x4f, 0x0c, 0xb2, 0x58, 0x4e, 0x99, 0x3c, 0x1f,
	0x35, 0x79, 0x06, 0x07, 0x4b, 0xda, 0xb3, 0x38, 0x64, 0x4f, 0x74, 0x19, 0x2a, 0xf8, 0x59, 0xdf,
	0xf6, 0x71, 0x9b, 0xda, 0x0e, 0x6e, 0x4c, 0x2d, 0x6a, 0x4b, 0x05, 0x03, 0xc4, 0xd4, 0xae, 0xed,
	0x44, 0x3d, 0x72, 0x3a, 0xb3, 0x47, 0xea, 0x7f, 0xd2, 0xe0, 0xfc, 0xd0, 0x29, 0x49, 0x17, 0x37,
	0xa0, 0xce, 0x77, 0x1e, 0x5a, 0x86, 0x39, 0x3b, 0x33, 0xf8, 0xd5, 0x71, 0x06, 0x0f, 0xc9, 0x8d,
	0xa1, 0xf5, 0x11, 0x25, 0x73, 0xd9, 0x95, 0x7c, 0x0c, 0xe7, 0x37, 0x30, 0x95, 0x02, 0xd8, 0x37,
	0x4c, 0x4e, 0x0e, 0x01, 0xf1, 0x58, 0xca, 0x0d, 0xc5, 0xd2, 0x5f, 0x73, 0x2a, 0x96, 0xb8, 0xa8,
	0x4d, 0x77, 0xdf, 0x43, 0x17, 0xa1, 0xac, 0x48, 0xa4, 0x57, 0x84, 0x13, 0xe8, 0x5b, 0x50, 0x64,
	0x9a, 0x0a, 0x97, 0xa8, 0xad, 0x5e, 0x49, 0xdf, 0x53, 0x84, 0xa7, 0x21, 0xe8, 0xd1, 0x26, 0xd4,
	0x08, 0x35, 0x7d, 0xda, 0xee, 0x7b, 0x84, 0x9f, 0x33, 0x77, 0x9c, 0xca, 0xaa, 0x1e, 0xe7, 0xa0,
	0x20, 0x72, 0x9b, 0x74, 0x77, 0x24, 0xa5, 0x31, 0xc3, 0x57, 0x06, 0x43, 0x74, 0x1f, 0xaa, 0xd8,
	0xb5, 0x42, 0x46, 0x85, 0xcc, 0x8c, 0x2a, 0xd8, 0xb5, 0x14, 0x9b, 0xf0, 0x7c, 0x8a, 0xd9, 0xcf,
	0xe7, 0x97, 0x1a, 0x34, 0x86, 0x0f, 0xe8, 0x34, 0x40, 0x79, 0x47, 0x2c, 0xc2, 0xe2, 0x80, 0xc6,
	0x46, 0xb8, 0x3a, 0x24, 0x43, 0x2e, 0xd1, 0x6d, 0x78, 0x23, 0xd4, 0x86, 0x7f, 0x79, 0x69, 0xce,
	0xf2, 0x53, 0x0d, 0xe6, 0x93, 0xb2, 0x4e, 0xb3, 0xef, 0x6f, 0x42, 0xd1, 0x76, 0xf7, 0xbd, 0x60,
	0xdb, 0x0b, 0x63, 0xe2, 0x8c, 0xc9, 0x12, 0xc4, 0xba, 0x03, 0x17, 0x36, 0x30, 0xdd, 0x74, 0x09,
	0xf6, 0xe9, 0x9a, 0xed, 0xf6, 0xbc, 0xee, 0x8e, 0x49, 0x0f, 0x4e, 0x11, 0x23, 0x31, 0x77, 0xcf,
	0x25, 0xdc, 0x5d, 0xff, 0xb3, 0x06, 0x17, 0xd3, 0xe5, 0xc9, 0xad, 0x37, 0xa1, 0xb4, 0x6f, 0xe3,
	0x9e, 0xc5, 0x6c, 0xa6, 0x71, 0x9b, 0xa9, 0x31, 0x8b, 0x95, 0x3e, 0x23, 0x96, 0x3b, 0xbc, 0x32,
	0xc2, 0x41, 0x5b, 0xd4, 0xb7, 0xdd, 0xee, 0x96, 0x4d, 0xa8, 0x21, 0xe8, 0x23, 0xf6, 0xcc, 0x67,
	0xf7, 0xcc, 0x5f, 0x68, 0xb0, 0xb0, 0x81, 0xe9, 0x3d, 0x05, 0xb5, 0xec, 0xbb, 0x4d, 0xa8, 0xdd,
	0x21, 0x2f, 0xb7, 0x88, 0x48, 0xc9, 0x99, 0xfa, 0x57, 0x1a, 0x5c, 0x1e, 0xa9, 0x8c, 0x34, 0x9d,
	0x84, 0x92, 0x00, 0x68, 0xd3, 0xa1, 0xe4, 0x7b, 0xf8, 0xe8, 0x53, 0xb3, 0x37, 0xc0, 0x3b, 0xa6,
	0xed, 0x0b, 0x28, 0x39, 0x21, 0xb0, 0xfe, 0x45, 0x83, 0x4b, 0x1b, 0x98, 0xee, 0x04, 0x69, 0xe6,
	0x35, 0x5a, 0x27, 0x43, 0x45, 0xf1, 0x6b, 0x71, 0x98, 0xa9, 0xda, 0xbe, 0x16, 0xf3, 0x2d, 0xf0,
	0x38, 0x88, 0x04, 0xe4, 0x3d, 0x51, 0x0b, 0x48, 0xe3, 0xe9, 0xff, 0xc8, 0x41, 0xf5, 0x53, 0x59,
	0x1f, 0xf0, 0x34, 0x92, 0xb4, 0x83, 0x96, 0x6e, 0x87, 0x48, 0x49, 0x91, 0x56, 0x65, 0x6c, 0xc0,
	0x0c, 0xc1, 0xf8, 0xf1, 0x49, 0x92, 0x46, 0x95, 0x2d, 0x54, 0x60, 0xbf, 0x05, 0x73, 0x03, 0x77,
	0x9f, 0x95, 0xb5, 0xd8, 0x92, 0xbb, 0x10, 0xd5, 0xe5, 0x64, 0xe4, 0x19, 0x5e, 0x88, 0xbe, 0x0b,
	0xb3, 0x49, 0x5e, 0xc5, 0x4c, 0xbc, 0x92, 0xcb, 0xf4, 0x9f, 0x6b, 0x30, 0xff, 0xc8, 0xa4, 0x9d,
	0x83, 0x75, 0x47, 0x5a, 0xf4, 0x14, 0xfe, 0xf8, 0x11, 0x94, 0x0f, 0xa5, 0xf5, 0x02, 0xd0, 0xb9,
	0x9c, 0xa2, 0x50, 0xf4, 0x9c, 0x8c, 0x70, 0x85, 0xfe, 0x6f, 0x0d, 0xce, 0xf1, 0xca, 0x3f, 0xd0,
	0xee, 0xd5, 0x47, 0xc6, 0x84, 0xea, 0x1f, 0x5d, 0x85, 0x9a, 0x63, 0xfa, 0x8f, 0x5b, 0x21, 0x4d,
	0x91, 0xd3, 0x24, 0x66, 0xf5, 0x67, 0x00, 0x72, 0xb4, 0x4d, 0xba, 0x27, 0xd0, 0xff, 0x03, 0x98,
	0x96, 0x52, 0x65, 0x90, 0x4c, 0x3a, 0xd8, 0x80, 0x5c, 0xff, 0x8f, 0x06, 0xb5, 0x10, 0xf6, 0x78,
	0x28, 0xd4, 0x20, 0xa7, 0x02, 0x20, 0xb7, 0xb9, 0x8e, 0x3e, 0x82, 0x29, 0xd1, 0xeb, 0x49, 0xde,
	0x6f, 0xc7, 0x79, 0xcb, 0x3e, 0x30, 0x82, 0x9d, 0x7c, 0xc2, 0x90, 0x8b, 0x98, 0x8d, 0x14, 0x54,
	0x88, 0xb6, 0x20, 0x6f, 0x44, 0x66, 0xd0, 0x26, 0xcc, 0xc6, 0x2b, 0xad, 0xc0, 0xd1, 0x17, 0x47,
	0x41, 0xc4, 0xba, 0x49, 0x4d, 0x8e, 0x10, 0xb5, 0x58, 0xa1, 0x45, 0xf4, 0xff, 0x17, 0xa1, 0x12,
	0xd9, 0xe5, 0xd0, 0x4e, 0x92, 0x47, 0x9a, 0x9b, 0x0c, 0x76, 0xf9, 0xe1, 0x72, 0xff, 0x6d, 0xa8,
	0xd9, 0x3c, 0xc1, 0xb6, 0xa5, 0x2b, 0x72, 0x44, 0x2c, 0x1b, 0x33, 0x62, 0x56, 0xc6, 0x05, 0x5a,
	0x80, 0x8a, 0x3b, 0x70, 0xda, 0xde, 0x7e, 0xdb, 0xf7, 0x9e, 0x12, 0xd9, 0x37, 0x94, 0xdd, 0x81,
	0xf3, 0xfd, 0x7d, 0xc3, 0x7b, 0x4a, 0xc2, 0xd2, 0x74, 0xea, 0x98, 0xa5, 0xe9, 0x02, 0x54, 0x1c,
	0xf3, 0x19, 0xe3, 0xda, 0x76, 0x07, 0x0e, 0x6f, 0x29, 0xf2, 0x46, 0xd9, 0x31, 0x9f, 0x19, 0xde,
	0xd3, 0x87, 0x03, 0x07, 0x2d, 0x41, 0xbd, 0x67, 0x12, 0xda, 0x8e, 0xf6, 0x24, 0x25, 0xde, 0x93,
	0xd4, 0xd8, 0xfc, 0xfd, 0xb0, 0x2f, 0x19, 0x2e, 0x72, 0xcb, 0xa7, 0x28, 0x72, 0x2d, 0xa7, 0x17,
	0x32, 0x82, 0xec, 0x45, 0xae, 0xe5, 0xf4, 0x14, 0x9b, 0x0f, 0x60, 0x7a, 0x8f, 0x97, 0x2d, 0xa4,
	0x51, 0x19, 0x89, 0x50, 0x0f, 0x58, 0xc5, 0x22, 0xaa, 0x1b, 0x23, 0x20, 0x47, 0x1f, 0x42, 0x99,
	0xe7, 0x0b, 0xbe, 0xb6, 0x9a, 0x69, 0x6d, 0xb8, 0x80, 0x41, 0x91, 0x85, 0x7b, 0xd4, 0xe4, 0xab,
	0x67, 0x46, 0x42, 0xd1, 0x3a, 0xa3, 0xd9, 0xf2, 0xba, 0x02, 0x8a, 0xd4, 0x0a, 0x74, 0x13, 0xce,
	0x76, 0x7c, 0x6c, 0x52, 0x6c, 0xad, 0x1d, 0xdd, 0xf3, 0x9c, 0xbe, 0xc9, 0xbd, 0xa9, 0x51, 0x5b,
	0xd4, 0x96, 0x4a, 0x46, 0xda, 0x27, 0x86, 0x0c, 0x1d, 0x35, 0x7a, 0xe0, 0x7b, 0x4e, 0x63, 0x56,
	0x20, 0x43, 0x7c, 0x16, 0x5d, 0x02, 0xb0, 0x7c, 0xaf, 0xdf, 0xc7, 0x56, 0xdb, 0xa4, 0x8d, 0x3a,
	0x3f, 0xc6, 0xb2, 0x9c, 0xb9, 0x4b, 0xf5, 0x2f, 0xe0, 0x5c, 0xe8, 0x22, 0x91, 0xe3, 0x18, 0x3e,
	0x59, 0xed, 0xa4, 0x27, 0x3b, 0xbe, 0xe2, 0xfc, 0x7b, 0x01, 0xe6, 0x5b, 0xe6, 0x21, 0x7e, 0xf9,
	0xc5, 0x6d, 0x26, 0x40, 0xde, 0x82, 0x39, 0x5e, 0xcf, 0xae, 0x46, 0xf4, 0x19, 0x93, 0x37, 0xa3,
	0xde, 0x30, 0xbc, 0x10, 0x7d, 0xcc, 0x12, 0x3e, 0xee, 0x3c, 0xde, 0xf1, 0xec, 0x30, 0x67, 0x5e,
	0x4a, 0xe1, 0x73, 0x4f, 0x51, 0x19, 0xd1, 0x15, 0x68, 0x67, 0x18, 0xdb, 0xa6, 0x38, 0x93, 0x6b,
	0x63, 0xbb, 0xa6, 0xd0, 0xfa, 0x49, 0x88, 0x43, 0x0d, 0x98, 0x96, 0x39, 0x99, 0x07, 0x7e, 0xc9,
	0x08, 0x86, 0x68, 0x07, 0xce, 0x8a, 0x1d, 0xb4, 0xa4, 0x57, 0x8b, 0xcd, 0x97, 0x32, 0x6d, 0x3e,
	0x6d, 0x69, 0x3c, 0x28, 0xca, 0xc7, 0x0e, 0x8a, 0x06, 0x4c, 0x4b, 0x47, 0xe5, 0x68, 0x50, 0x32,
	0x82, 0x21, 0xab, 0xfd, 0x21, 0x34, 0xd9, 0x84, 0x16, 0xfe, 0x3b, 0x50, 0x52, 0x4e, 0x9c, 0xcb,
	0xec, 0xc4, 0x6a, 0x4d, 0x12, 0x87, 0xf3, 0x09, 0x1c, 0xd6, 0xff, 0xab, 0x41, 0x35, 0xba, 0x05,
	0x86, 0xef, 0x3e, 0xee, 0x78, 0xbe, 0xd5, 0xc6, 0x2e, 0xf5, 0x6d, 0x2c, 0xda, 0xc4, 0x82, 0x31,
	0x23, 0x66, 0xef, 0x8b, 0x49, 0x46, 0xc6, 0xa0, 0x95, 0x50, 0xd3, 0xe9, 0xb7, 0xf7, 0x59, 0x04,
	0xe7, 0x04, 0x99, 0x9a, 0xe5, 0x01, 0x7c, 0x05, 0xaa, 0x21, 0x19, 0xf5, 0xb8, 0xfc, 0x82, 0x51,
	0x51, 0x73, 0xbb, 0x1e, 0x7a, 0x0b, 0x6a, 0xdc, 0x6a, 0xed, 0x9e, 0xd7, 0x6d, 0xb3, 0x96, 0x4a,
	0x26, 0x94, 0xaa, 0x25, 0xd5, 0x62, 0xc7, 0x11, 0xa7, 0x22, 0xf6, 0xe7, 0x58, 0xa6, 0x14, 0x45,
	0xd5, 0xb2, 0x3f, 0xc7, 0xfa, 0x97, 0x1a, 0xcc, 0xb0, 0xfc, 0xf8, 0xd0, 0xb3, 0xf0, 0xee, 0x09,
	0xab, 0x89, 0x0c, 0xd7, 0x69, 0x17, 0xa1, 0xac, 0x76, 0x20, 0xb7, 0x14, 0x4e, 0xb0, 0xde, 0x7b,
	0x46, 0xa6, 0xc1, 0x96, 0xba, 0x5e, 0xe5, 0xac, 0x34, 0xce, 0x8a, 0xff, 0x46, 0xdf, 0x8e, 0xdf,
	0xcd, 0xbc, 0x95, 0x1a, 0x57, 0x9c, 0x09, 0xaf, 0x38, 0x63, 0x39, 0x30, 0x4b, 0x53, 0xf7, 0x9c,
	0x1d, 0xac, 0x34, 0x05, 0x3f, 0xd8, 0x06, 0x4c, 0x9b, 0x96, 0xe5, 0x63, 0x42, 0xa4, 0x1e, 0xc1,
	0x90, 0x7d, 0x39, 0xc4, 0x3e, 0x09, 0x5c, 0x2c, 0x6f, 0x04, 0x43, 0xf4, 0x21, 0x94, 0x54, 0x89,
	0x9a, 0x4f, 0x2b, 0x4b, 0xa2, 0x7a, 0xca, 0x26, 0x44, 0xad, 0xd0, 0xbf, 0xca, 0x41, 0x4d, 0x86,
	0xf5, 0x9a, 0xcc, 0x53, 0xe3, 0x9d, 0x7d, 0x0d, 0xaa, 0xfb, 0x61, 0x58, 0x8e, 0xbb, 0x6c, 0x88,
	0x46, 0x6f, 0x6c, 0xcd, 0x24, 0x87, 0x8f, 0x67, 0xca, 0xc2, 0xa9, 0x32, 0x65, 0xf1, 0xb8, 0xa0,
	0xa0, 0xdf, 0x85, 0x4a, 0x84, 0x31, 0x87, 0x33, 0x71, 0xff, 0x20, 0x6d, 0x11, 0x0c, 0xd9, 0x97,
	0xbd, 0x88, 0x11, 0xca, 0x2a, 0xd3, 0xb3, 0xba, 0xff, 0xfc, 0x06, 0xa6, 0x06, 0xee, 0x78, 0x87,
	0xd8, 0x3f, 0x3a, 0xfd, 0xd5, 0xce, 0x9d, 0xc8, 0x19, 0x67, 0x6c, 0x43, 0xd4, 0x02, 0x74, 0x27,
	0xd4, 0x33, 0x9f, 0xd6, 0xd9, 0x46, 0xa1, 0x5d, 0x9e, 0x50, 0xb8, 0x95, 0xdf, 0x88, 0x4b, 0xaa,
	0xf8, 0x56, 0x4e, 0x9a, 0x3d, 0x5f, 0x48, 0x75, 0xab, 0xff, 0x4e, 0x83, 0x6f, 0x6c, 0x60, 0xfa,
	0x20, 0xde, 0xf8, 0xbd, 0x6e, 0xad, 0x1c, 0x68, 0xa6, 0x29, 0x75, 0x9a, 0x53, 0x6f, 0x42, 0x89,
	0x04, 0xdd, 0xb0, 0xb8, 0x3e, 0x54, 0x63, 0xfd, 0x67, 0x1a, 0x34, 0xa4, 0x14, 0x2e, 0x93, 0x15,
	0x6e, 0x3d, 0x4c, 0xb1, 0xf5, 0xaa, 0xdb, 0xb3, 0x3f, 0x68, 0x50, 0x8f, 0x82, 0x20, 0xc7, 0xb1,
	0xf7, 0xa1, 0xc8, 0xbb, 0x60, 0xa9, 0xc1, 0x44, 0x67, 0x15, 0xd4, 0x2c, 0xa2, 0x78, 0x31, 0xb1,
	0x4b, 0x02, 0x90, 0x93, 0xc3, 0x10, 0x89, 0xf3, 0xc7, 0x46, 0x62, 0xfd, 0x57, 0x39, 0x68, 0x84,
	0x75, 0xed, 0x2b, 0x07, 0xbb, 0x11, 0x55, 0x4f, 0xfe, 0x05, 0x55, 0x3d, 0x85, 0x63, 0x03, 0xdc,
	0xbf, 0x72, 0xac, 0xa1, 0x0e, 0xec, 0xb1, 0xd3, 0x33, 0x5d, 0x34, 0x0f, 0x53, 0xfd, 0x9e, 0x19,
	0xde, 0x2a, 0xc9, 0x11, 0x6a, 0x41, 0x8d, 0xc4, 0xec, 0x25, 0x2d, 0xf0, 0x6e, 0x9a, 0xfd, 0x47,
	0x98, 0xd8, 0x48, 0xb0, 0x60, 0x0d, 0x83, 0x28, 0x39, 0x79, 0xdf, 0x27, 0x53, 0xb3, 0x38, 0x68,
	0xd6, 0xf2, 0xdd, 0x00, 0xc4, 0x3e, 0x78, 0x03, 0xda, 0xb6, 0xdd, 0x36, 0xc1, 0x1d, 0xcf, 0xb5,
	0x08, 0xaf, 0x37, 0x8a, 0x46, 0x5d, 0x7e, 0xd9, 0x74, 0x5b, 0x62, 0x1e, 0xbd, 0x0f, 0x05, 0x7a,
	0xd4, 0x17, 0x95, 0x46, 0x2d, 0x15, 0xd9, 0x42, 0xbd, 0x76, 0x8f, 0xfa, 0xd8, 0xe0, 0xe4, 0xac,
	0xe5, 0x67, 0xac, 0xa8, 0x6f, 0x1e, 0xe2, 0x5e, 0xf0, 0x1e, 0x16, 0xce, 0x30, 0x4f, 0x0c, 0x5a,
	0xe7, 0x69, 0x91, 0x88, 0xe5, 0x50, 0xff, 0x67, 0x0e, 0xea, 0x21, 0x4b, 0x03, 0x93, 0x41, 0x8f,
	0x8e, 0xb4, 0xdf, 0xf8, 0x76, 0x61, 0x52, 0x1a, 0xfc, 0x18, 0x2a, 0xb2, 0x8d, 0x3f, 0x46, 0x22,
	0x04, 0xb1, 0x64, 0x6b, 0x8c, 0xeb, 0x15, 0x5f, 0x90, 0xeb, 0x4d, 0x1d, 0xdb, 0xf5, 0x5a, 0x30,
	0x1f, 0x80, 0x56, 0x28, 0x69, 0x1b, 0x53, 0x73, 0x4c, 0x9a, 0xbd, 0x0c, 0x15, 0x91, 0x8c, 0x44,
	0xe1, 0x29, 0x4a, 0x3d, 0xd8, 0x53, 0x4d, 0x90, 0xfe, 0x63, 0x38, 0xc7, 0x83, 0x3e, 0x79, 0xdd,
	0x97, 0xe5, 0xc2, 0x54, 0x57, 0x85, 0x24, 0x2b, 0x1a, 0x83, 0x44, 0x1e, 0x9b, 0xd3, 0xb7, 0xe0,
	0x8d, 0x04, 0xff, 0x53, 0x80, 0xfa, 0xf5, 0x5b, 0x30, 0x37, 0x84, 0x54, 0xa8, 0x06, 0xf0, 0x89,
	0xdb, 0x91, 0x10, 0x5e, 0x3f, 0x83, 0xaa, 0x50, 0x0a, 0x00, 0xbd, 0xae, 0x5d, 0x6f, 0x45, 0xe3,
	0x95, 0x39, 0x31, 0x3a, 0x0f, 0x67, 0x3f, 0x71, 0x2d, 0xbc, 0x6f, 0xbb, 0xd8, 0x0a, 0x3f, 0xd5,
	0xcf, 0xa0, 0xb3, 0x30, 0xbb, 0xe9, 0xba, 0xd8, 0x8f, 0x4c, 0x6a, 0x6c, 0x72, 0x1b, 0xfb, 0x5d,
	0x1c, 0x99, 0xcc, 0xad, 0xfe, 0x6d, 0x0e, 0xca, 0xac, 0xf6, 0xbc, 0xe7, 0x79, 0xbe, 0x85, 0xfa,
	0x80, 0xf8, 0xeb, 0x82, 0xd3, 0xf7, 0x5c, 0xf5, 0x0c, 0x87, 0x6e, 0x8e, 0x68, 0x63, 0x86, 0x49,
	0xa5, 0xcd, 0x9b, 0x57, 0x47, 0xac, 0x48, 0x90, 0xeb, 0x67, 0x90, 0xc3, 0x25, 0xb2, 0x88, 0xdf,
	0xb5, 0x3b, 0x8f, 0x83, 0x2b, 0xa9, 0x31, 0x12, 0x13, 0xa4, 0x81, 0xc4, 0xc4, 0xeb, 0x9e, 0x1c,
	0x88, 0x27, 0xa0, 0xe0, 0xa4, 0xf4, 0x33, 0xe8, 0x09, 0x9c, 0xdb, 0xc0, 0x34, 0xbc, 0xf5, 0x0f,
	0x04, 0xae, 0x8e, 0x16, 0x38, 0x44, 0x7c, 0x4c, 0x91, 0x5b, 0x50, 0xe4, 0xa9, 0x19, 0xa5, 0x45,
	0x48, 0xf4, 0xbf, 0x28, 0xcd, 0xc5, 0xd1, 0x04, 0x8a, 0xdb, 0x4f, 0x60, 0x36, 0xf1, 0xd6, 0x8e,
	0xde, 0x49, 0x59, 0x96, 0xfe, 0xaf, 0x89, 0xe6, 0xf5, 0x2c, 0xa4, 0x4a, 0x56, 0x17, 0x6a, 0xf1,
	0xb7, 0x09, 0xb4, 0x94, 0xb2, 0x3e, 0xf5, 0x9d, 0xb4, 0xf9, 0x4e, 0x06, 0x4a, 0x25, 0xc8, 0x81,
	0x7a, 0xf2, 0xed, 0x17, 0x5d, 0x1f, 0xcb, 0x20, 0xee, 0x6e, 0xef, 0x66, 0xa2, 0x55, 0xe2, 0x8e,
	0xb8, 0x13, 0x0c, 0xbd, 0x3d, 0xa2, 0xe5, 0x74, 0x36, 0xa3, 0x1e, 0x45, 0x9b, 0x2b, 0x99, 0xe9,
	0x95, 0xe8, 0x2f, 0x45, 0x4b, 0x90, 0xf6, 0x7e, 0x87, 0x6e, 0xa5, 0xb3, 0x1b, 0xf3, 0xf0, 0xd8,
	0x5c, 0x3d, 0xce, 0x12, 0xa5, 0xc4, 0x17, 0xbc, 0x96, 0x4f, 0x79, 0x03, 0x4b, 0xc6, 0x5d, 0xc0,
	0x6f, 0xf4, 0xe3, 0x5e, 0xf3, 0xd6, 0x31, 0x56, 0x28, 0x05, 0xbc, 0xe4, 0xeb, 0x7a, 0x10, 0x86,
	0x2b, 0x13, 0xbd, 0xe6, 0x64, 0x31, 0xf8, 0x19, 0xcc, 0x26, 0xee, 0xfe, 0x52, 0xa3, 0x26, 0xfd,
	0x7e, 0xb0, 0x39, 0x0e, 0xd0, 0x45, 0x48, 0x26, 0x5a, 0x23, 0x34, 0xc2, 0xfb, 0x53, 0xda, 0xa7,
	0xe6, 0xf5, 0x2c, 0xa4, 0x6a, 0x23, 0x84, 0xc3, 0x65, 0xa2, 0xbd, 0x40, 0x37, 0xd2, 0x79, 0xa4,
	0xb7, 0x46, 0xcd, 0xf7, 0x32, 0x52, 0x2b, 0xa1, 0x6d, 0x80, 0x0d, 0x4c, 0xb7, 0x31, 0xf5, 0x99,
	0x8f, 0x5c, 0x4d, 0x35, 0x79, 0x48, 0x10, 0x88, 0xb9, 0x36, 0x91, 0x4e, 0x09, 0xf8, 0x21, 0xa0,
	0x20, 0xcf, 0x45, 0x6e, 0x9e, 0xdf, 0x1c, 0x5b, 0xc5, 0x89, 0x92, 0x6b, 0xd2, 0xd9, 0x3c, 0x81,
	0xfa, 0xb6, 0xe9, 0x0e, 0xcc, 0x5e, 0x84, 0xef, 0x8d, 0x54, 0xc5, 0x92, 0x64, 0x23, 0xac, 0x35,
	0x92, 0x5a, 0x6d, 0xe6, 0xa9, 0xca, 0xa1, 0xa6, 0x0a, 0x41, 0x9c, 0xc4, 0x96, 0xd0, 0x1a, 0x09,
	0xc2, 0x11, 0xd8, 0x32, 0x86, 0x5e, 0x09, 0x7e, 0xae, 0xf1, 0xff, 0x70, 0x24, 0x08, 0x1e, 0xd9,
	0xf4, 0x80, 0x15, 0xf7, 0x24, 0x8b, 0x0a, 0x9c, 0xf0, 0x18, 0x2a, 0x48, 0x7a, 0xa5, 0x82, 0x05,
	0x33, 0xb1, 0x1a, 0x09, 0xa5, 0x5d, 0x1f, 0xa7, 0x55, 0x69, 0xcd, 0xa5, 0xc9, 0x84, 0x81, 0x94,
	0xd5, 0xff, 0x15, 0xa0, 0x14, 0xdc, 0x97, 0xbd, 0x86, 0x92, 0xe5, 0x35, 0xd4, 0x10, 0x9f, 0xc1,
	0x6c, 0xe2, 0x31, 0x3b, 0x15, 0x62, 0xd2, 0x1f, 0xbc, 0x27, 0xc5, 0xc8, 0x23, 0xf9, 0xbf, 0x54,
	0x05, 0x27, 0xd7, 0x46, 0xd5, 0x21, 0x49, 0x24, 0x99, 0xc0, 0xf8, 0xa5, 0xe3, 0xc6, 0x43, 0x80,
	0x48, 0x5c, 0x8f, 0xef, 0xfa, 0x98, 0xab, 0x4e, 0x50, 0x78, 0xed, 0xf6, 0x8f, 0x6e, 0x75, 0x6d,
	0x7a, 0x30, 0xd8, 0x63, 0x5f, 0x56, 0x04, 0xe9, 0x7b, 0xb6, 0x27, 0x7f, 0xad, 0x04, 0x27, 0xba,
	0xc2, 0x57, 0xaf, 0x30, 0x01, 0xfd, 0xbd, 0xbd, 0x29, 0x3e, 0xba, 0xfd, 0x75, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x0f, 0x73, 0x18, 0x5f, 0xb9, 0x2c, 0x00, 0x00,
}
